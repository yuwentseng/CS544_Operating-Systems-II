NAME: Yu-Wen, Tseng
COURSE: CS544
ASSIGNMENT: LAB2 QUESTION

1. Assuming that the following JOS kernel code is correct, what type should variable x have, uintptr_t or physaddr_t?
mystery_t x;
char* value = return_a_pointer();
*value = 10;
x = (mystery_t) value;

ANSWER: 
In the code we operate on virtual addresses, so the x type should be uintptr_t.

2. What entries (rows) in the page directory have been filled in at this point? What addresses do they map and where do they point? In other words, fill out this table as much as possible:

ANSWER: 
(Entry, Base Virtual Address, Points to: )	
(1023, 0xffc00000, Page table for top 4MB of physical memory)
(1022, 0xff800000, page table for 2nd to top 4MB of physical memory)
(960, 0xf0000000, KERNBASE = KSTACKTOP)
(959, 0xefc00000, MMIOLIM)
(958, 0xef800000, ULIM) 
(956, 0xef000000, UPAGES)
(2, 0x00800000, UTEXT)
(1, 0x00400000, UTEMP)
(0, 0x00000000, empty memory)

3. We have placed the kernel and user environment in the same address space. Why will user programs not be able to read or write the kernel’s memory? What specific mechanisms protect the kernel memory?

ANSWER: 
The perm of the page table entry of the kernel space memory is not set to PTE_U, and the CPL needs to be 0-2 to be accessible. The CPL of the user program is 3, because the permissions are insufficient, the user program will report an error when reading the kernel memory.

4. What is the maximum amount of physical memory that this operating system can support? Why?

ANSWER:
2G, becuase the maximum size of UPAGES is 4MB, sizeof(struct PageInfo))=8Byte, so we can have at most4MB/8B=512K pages, the size of one page is 4KB, so we can have at most 4MB/8B*4KB)=2GB physical memory.

5. How much space overhead is there for managing memory, if we actually had the maximum amount of physical memory? How is this overhead broken down?

ANSWER:
If there is 2GB of memory, there are 512K physical pages, and each PageInfo structure occupies 8 bytes, which is 4MB in total. The page directory needs 512*8=4KB, and the page table includes 512K page table entries. Each of the 4 bytes requires 512K*4=2MB storage, so the extra memory is 6MB + 4KB.

6. Revisit the page table setup in kern/entry.S and kern/entrypgdir.c. Immediately after we turn on paging, EIP is still a low number (a little over 1MB). At what point do we transition to running at an EIP above KERNBASE? What makes it possible for us to continue executing at a low EIP between when we enable paging and when we begin running at an EIP above KERNBASE? Why is this transition necessary?

ANSWER:
We have a high EIP after the jump command jmp *%eax. Since the program maps [0, 4MB) and [KERNBASE, KERNBASE + 4MB) to the physical address [0, 4MB), even if it is low EIP after the page is opened, it can continue to run. Because we need a jump command, this is done in low eip, in order to ensure correct, so this step is needed


