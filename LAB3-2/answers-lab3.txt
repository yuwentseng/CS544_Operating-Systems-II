Name: Yu-Wen, Tseng
Course: CS544 
Assignment: JOS LAB3-B

1. What is the purpose of having an individual handler function for each exception/interrupt? (i.e., if all exceptions/interrupts were delivered to the same handler, what feature that exists in the current implementation could not be provided?)

ANSWER:

This is to distinguish between different exception/interrupt types. TRAPHANDLER pushes the interrupt vector trapno and the error code errno in the stack, and handles it according to the exception/interrupt type later.

2. Did you have to do anything to make the user/softint program behave correctly? The grade script expects it to produce a general protection fault (trap 13), but softint’s code says int $14. Why should this produce interrupt vector 13? What happens if the kernel actually allows softint’s int $14 instruction to invoke the kernel’s page fault handler (which is interrupt vector 14)?

ANSWER:

The reason for this is that the current Page fault handler has a call permission of 0 and can only be called by the system, so we call the user environment softint directly to generate a General Protection fault permission error.

3. The break point test case will either generate a break point exception or a general protection fault depending on how you initialized the break point entry in the IDT (i.e., your call to SETGATE from trap_init). Why? How do you need to set it up in order to get the breakpoint exception to work as specified above and what incorrect setup would cause it to trigger a general protection fault?

ANSWER:


In the case where the dpl of the current breakpoint handler entry is set to 3, we get the break point exception, and if we set it to 0, it will be a general protection fault.

4. What do you think is the point of these mechanisms, particularly in light of what the user/softint test program does?

ANSWER:

For protection. 

5. What causes this page fault? You don¡¯t need to fix it, but you should understand why it happens.

ANSWER:
The page fault is caused by accessing the memory which address is 0xeebfe000. It beyond the user stack.
